
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

public class frmClase06 extends javax.swing.JDialog {
     
    // Declaro variable de Conexion
    clsConnection oConn = new clsConnection();
    
    // Variable para las funciones propias
    clsFunciones  oFunc = new clsFunciones();
    
    // Eumeraciones para las operaciones
    enum eOperaciones { Insert, Delete, Update};
    
    // Declaro la variable de la operaci√≥n
    eOperaciones Operacion;

    /** Creates new form frmClase06 */
    public frmClase06(java.awt.Frame parent, boolean modal) 
    {
        
        super(parent, modal);
        initComponents();
           
        // Centra la Forma
        this.setLocationRelativeTo(null);
        
        // Carga el ListBox con los procesos
        SubProcesosCarga();
        
        // Carga el cboBox con los roles
        SubRoleCarga();
        
        // Carga las Claves
        SubClavesCarga();
        
        // Habilita Datos
        SubHabilitaCaptura(false);
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlClave = new javax.swing.JPanel();
        lblUser = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        choClaves = new java.awt.Choice();
        pnlDetalle = new javax.swing.JPanel();
        lblPassword = new javax.swing.JLabel();
        txpPassword = new javax.swing.JPasswordField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        txpRePassword = new javax.swing.JPasswordField();
        lblPassword1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstProcesos = new javax.swing.JList();
        txtRole = new javax.swing.JTextField();
        choRoles = new java.awt.Choice();
        pnlOperaciones = new javax.swing.JPanel();
        btnIns = new javax.swing.JButton();
        btnUpd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        pnlTransaccion = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sistema-Usuarios"); // NOI18N

        pnlClave.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Claves", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 0, 12))); // NOI18N
        pnlClave.setName("pnlClave"); // NOI18N

        lblUser.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblUser.setText("User:");
        lblUser.setName("lblUser"); // NOI18N

        txtClave.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtClave.setName("txtClave"); // NOI18N

        choClaves.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        choClaves.setForeground(new java.awt.Color(51, 51, 255));
        choClaves.setName("choClaves");
        choClaves.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choClavesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlClaveLayout = new javax.swing.GroupLayout(pnlClave);
        pnlClave.setLayout(pnlClaveLayout);
        pnlClaveLayout.setHorizontalGroup(
            pnlClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClaveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUser)
                .addGap(34, 34, 34)
                .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(choClaves, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlClaveLayout.setVerticalGroup(
            pnlClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlClaveLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(pnlClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(choClaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlClaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblUser)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlDetalle.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 0, 12))); // NOI18N
        pnlDetalle.setName("pnlDetalle"); // NOI18N

        lblPassword.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblPassword.setText("Password:");
        lblPassword.setName("lblPassword"); // NOI18N

        txpPassword.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txpPassword.setName("txpPassword"); // NOI18N

        lblName.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblName.setText("Name:");
        lblName.setName("lblName"); // NOI18N

        txtName.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtName.setName("txtName"); // NOI18N

        lblRole.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblRole.setText("Role:");
        lblRole.setName("lblRole"); // NOI18N

        txpRePassword.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txpRePassword.setName("txpRePassword"); // NOI18N

        lblPassword1.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lblPassword1.setText("Re:");
        lblPassword1.setName("lblPassword1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        lstProcesos.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesos"));
        lstProcesos.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        lstProcesos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstProcesos.setName("lstProcesos"); // NOI18N
        jScrollPane1.setViewportView(lstProcesos);

        txtRole.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtRole.setName("txtRole");

        choRoles.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        choRoles.setForeground(new java.awt.Color(51, 51, 255));
        choRoles.setName("choRoles");
        choRoles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choRolesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlDetalleLayout = new javax.swing.GroupLayout(pnlDetalle);
        pnlDetalle.setLayout(pnlDetalleLayout);
        pnlDetalleLayout.setHorizontalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlDetalleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword)
                            .addComponent(lblName)
                            .addComponent(lblRole))
                        .addGap(10, 10, 10)
                        .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDetalleLayout.createSequentialGroup()
                                .addComponent(txpPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPassword1)
                                .addGap(18, 18, 18)
                                .addComponent(txpRePassword, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                            .addComponent(txtName)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalleLayout.createSequentialGroup()
                                .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(choRoles, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        pnlDetalleLayout.setVerticalGroup(
            pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalleLayout.createSequentialGroup()
                .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txpPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword1)
                    .addComponent(txpRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRole)
                        .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(choRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 0, 12))); // NOI18N
        pnlOperaciones.setName("pnlOperaciones"); // NOI18N

        btnIns.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnIns.setText("Ins");
        btnIns.setName("btnIns"); // NOI18N
        btnIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsActionPerformed(evt);
            }
        });

        btnUpd.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnUpd.setText("Upd");
        btnUpd.setName("btnUpd"); // NOI18N
        btnUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdActionPerformed(evt);
            }
        });

        btnDel.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnDel.setText("Del");
        btnDel.setName("btnDel"); // NOI18N
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOperacionesLayout = new javax.swing.GroupLayout(pnlOperaciones);
        pnlOperaciones.setLayout(pnlOperacionesLayout);
        pnlOperacionesLayout.setHorizontalGroup(
            pnlOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOperacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIns)
                .addGap(18, 18, 18)
                .addComponent(btnUpd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDel)
                .addContainerGap())
        );
        pnlOperacionesLayout.setVerticalGroup(
            pnlOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOperacionesLayout.createSequentialGroup()
                .addGroup(pnlOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIns)
                    .addComponent(btnDel)
                    .addComponent(btnUpd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTransaccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transacci√≥n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 0, 12))); // NOI18N
        pnlTransaccion.setName("pnlTransaccion"); // NOI18N

        btnOk.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnOk.setText("Ok");
        btnOk.setName("btnOk"); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTransaccionLayout = new javax.swing.GroupLayout(pnlTransaccion);
        pnlTransaccion.setLayout(pnlTransaccionLayout);
        pnlTransaccionLayout.setHorizontalGroup(
            pnlTransaccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTransaccionLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        pnlTransaccionLayout.setVerticalGroup(
            pnlTransaccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTransaccionLayout.createSequentialGroup()
                .addGroup(pnlTransaccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlClave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlTransaccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDetalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Carga los Procesos existentes a la lista
    private void SubProcesosCarga()
    {
        // Para instrucci√≥n sql
        String sqlStmt;
        String sIdeProceso;  // variable para el proceso
        String sNomProceso;  // variable para el nombre del proceso
        
        // Variable para agregar elementos a la lista
        DefaultListModel itemLista;
        itemLista = new DefaultListModel();
        
        // Limpia el Control
        lstProcesos.removeAll();
        
         // Prepara Variable para realizar el Query
        sqlStmt = "Select * from 02tblprocesos";
        
        if (oConn.FnBoolQueryExecute(sqlStmt))
        {
            try 
            {
                // Verifica resultados
                 while (oConn.setResult.next())
                 {
                     
                     // Obtiene los datos de la Consulta
                     sIdeProceso = oConn.setResult.getString ("strProcesoIde");
                     sNomProceso = oConn.setResult.getString ("strProcesoNom");
                     
                     // agrega el dato a la lista
                     itemLista.addElement(sIdeProceso+"-"+sNomProceso);
                     
                 }
                 
                 // Agrega el Dato a la lista
                 lstProcesos.setModel(itemLista);
                
             
                 // Cierra Resultados
                 oConn.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialorootPane,ex);
                oFunc.SubSistemaMensaje(ex.toString());
                Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    // Carga los Procesos existentes a la lista
    private void SubRoleCarga()
    {
        // Para instrucci√≥n sql
        String sqlStmt;
        String sNomRole;
        
        
        // Limpia el Control
        choRoles.removeAll();
        choRoles.addItem("Seleccione");
        
         // Prepara Variable para realizar el Query
        sqlStmt = "Select distinct(strRoleName) from 03tblrolprocesos";
        
        if (oConn.FnBoolQueryExecute(sqlStmt))
        {
            try 
            {
                // Verifica resultados
                 while (oConn.setResult.next())
                 {
                     
                     // Obtiene los datos de la Consulta
                     sNomRole = oConn.setResult.getString ("strRoleName");
                     
                     // Agrega el Elemento
                     choRoles.addItem(sNomRole);
                     
                 }
                 
                 // Cierra Resultados
                 oConn.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialog(rootPane,ex);
                oFunc.SubSistemaMensaje(ex.toString());
                Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

    }
    
    // Carga los Procesos existentes a la lista
    private void SubClavesCarga()
    {
        // Para instrucci√≥n sql
        String sqlStmt;
        String sClave;
        
        
        // Limpia el Control
        choClaves.removeAll();
        choClaves.addItem("Seleccione");
        
         // Prepara Variable para realizar el Query
        sqlStmt = "Select strUserIde from 01tblUsers";
        
        if (oConn.FnBoolQueryExecute(sqlStmt))
        {
            try 
            {
                // Verifica resultados
                 while (oConn.setResult.next())
                 {
                     
                     // Obtiene los datos de la Consulta
                     sClave = oConn.setResult.getString ("strUserIde");
                     
                     // Agrega el Elemento
                     choClaves.addItem(sClave);
                     
                 }
                 
                 // Cierra Resultados
                 oConn.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialog(rootPane,ex);
                oFunc.SubSistemaMensaje(ex.toString());
                Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

    }
    
    // Habilita Captura
    private void SubHabilitaCaptura(boolean bHabilita)
    {
        // Habilita/Deshabilita clave
        txtClave.setEnabled(! bHabilita);
        choClaves.setEnabled (! bHabilita);
        
        // Habilita/Deshabilita detalles
        txpPassword.setEnabled(bHabilita);
        txpRePassword.setEnabled(bHabilita);
        txpRePassword.setEnabled(bHabilita);
        txtName.setEnabled(bHabilita);
        txtRole.setEnabled(bHabilita);
        choRoles.setEnabled(bHabilita);
        lstProcesos.setEnabled(bHabilita);
        
        // Habilita/Desahabilita Operaciones
        btnIns.setEnabled(! bHabilita);
        btnUpd.setEnabled(! bHabilita);
        btnDel.setEnabled(! bHabilita);
        
        // Habilita/Deshabilita captura
        btnOk.setEnabled(bHabilita);
        btnCancel.setEnabled(bHabilita);    
        
        if (bHabilita)
            // Coloca el Foco
            txpPassword.requestFocus();
    
    }
    
    // Procedimiento para realizar Insert
    private void SubInsertUser()
    {
        // TODO add your handling code here:
        String strSqlStmt; // Para el Query
        String sPass;      // Para el Password
        
        
        // Coloca la transacci√≥n a true
        oConn.SubAutoCommit(false);
        
        // Quita encriptamiento al password
        sPass = new String(txpPassword.getPassword());
    
    
        // Prepara el Query
        strSqlStmt  = " Insert into 01tblUsers (strUserIde,strUserPass,strUserName,strRoleName)";
        strSqlStmt += " Values ('"+txtClave.getText().toString()+"',";
        strSqlStmt += " '"+sPass+"','"+txtName.getText().toString()+"',";
        strSqlStmt += " '"+txtRole.getText().toString()+"')";
        
        // Ejecuta el Query
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt))
        {    
           // Elimina el Role Proceso asociado
           subDeleteRoleProcesos();
           
           // Ejecuta Inserci√≥n
           if (fnBoolInsertaRoleProcesos())
           {
               oConn.SubCommit();
               // Mensaje
               oFunc.SubSistemaMensaje("Se ha realizado Insert con √âxito");
           }
           else
               oConn.SubRollBack();
            
           
        }
        else
            // realiza el rollback
            oConn.SubRollBack();
    }
    
    // Procedimiento para realizar Update
    private void SubUpdateUser()
    {
        // TODO add your handling code here:
        String strSqlStmt;
        String sPass;
        
        
        // Coloca la transacci√≥n a true
        oConn.SubAutoCommit(false);
        
        // Quita encriptamiento al password
        sPass = new String(txpPassword.getPassword());
    
    
        // Prepara el Query
        strSqlStmt  = " Update 01tblUsers ";
        strSqlStmt += " Set strUserPass='"+sPass.toString()+"', ";
        strSqlStmt += "     strUserName='"+txtName.getText().toString()+"', ";
        strSqlStmt += "     strRoleName='"+txtRole.getText().toString()+"' ";
        strSqlStmt += " Where strUserIde='"+txtClave.getText().toString()+"' ";

        // Ejecuta el Query
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt))
        {    
           // Elimina el Role Proceso asociado
           subDeleteRoleProcesos();
           
           // Ejecuta Inserci√≥n
           if (fnBoolInsertaRoleProcesos())
           {
               oConn.SubCommit();
               // Mensaje
               oFunc.SubSistemaMensaje("Se ha realizado Update con √âxito");           
           }
           else
               oConn.SubRollBack();
            
          
        }
        else
            // realiza el rollback
            oConn.SubRollBack();
        
    }
    
    // Procedimiento pra Eliminar un Usuario
    private void SubDeleteUser()
    {
        
        // TODO add your handling code here:
        String strSqlStmt;
    
        // Prepara el Query
        strSqlStmt  = " Delete from 01tblUsers ";
        strSqlStmt += " Where strUserIde='"+txtClave.getText().toString()+"' ";

        // Ejecuta el Query
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt))
        {    
           // Mensaje
           oFunc.SubSistemaMensaje("Se ha realizado Delete con √âxito");
        }
       
    }
    
    private boolean fnBoolDatosOk()
    {
        
        // Variable para el Mensaje
        String sMessage="";
        String sPass="";
        String sRePass="";
        
        // Valida el
        if (txpPassword.getPassword().length==0)
        {
            // A√±ade el Usuario al Mensaje
            sMessage = "Password";
            
            // Coloca el Foco en el Objeto
            txpPassword.requestFocus();
        }
        
        // Quito encriptamiento a los passwords
        sPass = new String(txpPassword.getPassword());
        sRePass =new String(txpRePassword.getPassword());
        
        // Valida el Password
        if ( ! sPass.equals(sRePass) )
        {
            // Valida si no fall√≥ con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txpPassword.requestFocus();
            
            // A√±ade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"Re Password";
        }

        
        // Valida el Nombre
        if (txtName.getText().length()<=0)
        {
            // Valida si no fall√≥ con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txtName.requestFocus();
            
            // A√±ade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"El Nombre";
        }

        // Valida el Role
        if (txtRole.getText().length()<=0)
        {
            // Valida si no fall√≥ con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txtRole.requestFocus();
            
            // A√±ade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"El role";
        }
        
        // Valida los procesos seleccionados
        if (lstProcesos.isSelectionEmpty())
        {
            // A√±ade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"Debe Seleccionar un Proceso";
        }
        
        // Verifica si hay que desplegar el Mensaje
        if (sMessage.length() > 0)
        {
            //Prepara el Mensaje
            sMessage = "Debe de Capturar los siguiente datos:\n"+sMessage;
            JOptionPane.showMessageDialog(null, sMessage);
            
            // Devuelve falso
            return false;
        }
        else
        {
            // Retorna Correcto
            return true;    
        }
        
       
    }
    
    
    private void subDeleteRoleProcesos()
    {
        
        // Variable para el Query
        String sQuery;
        Boolean bResult=false;
        
        // Prepara el Query para Eliminar
        sQuery ="Delete from 03tblrolprocesos";        
        sQuery = sQuery + " Where strRoleName='"+txtRole.getText().toString()+"'";
        
        // Ejecuta el Query para Borrar
        oConn.FnBoolQueryExecuteUpdate(sQuery);
        
        
    }
    
    private boolean fnBoolExisteRole()
    {
        // Variable para el Query
        String sQuery;
        Boolean bResult=false;
        
        // Prepara el Query
        sQuery ="Select count(strRoleName) from 03tblrolprocesos";
        sQuery = sQuery + " Where strRoleName='"+txtRole.getText().toString()+"'";
        
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        // Capturo el Error
        try {
            // Verifico que haya habido resultados
            if (oConn.setResult.next())
            {
        
                // Cierro los Resultados
                oConn.setResult.close();
                
                // Resultado
                bResult = true;

            }
        } catch (SQLException ex) {
            oFunc.SubSistemaMensaje("fnBoolExisteRole:"+ex.getMessage().toString());
        }
        
        return (bResult);
    }
    
    // Funcion para buscar un usuario en la BD
    private boolean FnBoolExisteUsuario() 
    {
        // Variable para el Query
        String sQuery;
        Boolean bResult=false;
        
        // Prepara el Query
        sQuery ="Select * from 01tblusers";
        sQuery = sQuery + " Where strUserIde='"+txtClave.getText()+"'";
        
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        // Capturo el Error
        try {
            // Verifico que haya habido resultados
            if (oConn.setResult.next())
            {
                // Coloco los datos
                txpPassword.setText(oConn.setResult.getString ("strUserPass"));
                txpRePassword.setText(oConn.setResult.getString ("strUserPass"));
                txtName.setText(oConn.setResult.getString ("strUserName"));
                txtRole.setText(oConn.setResult.getString ("strRoleName"));

                // Cierro los Resultados
                oConn.setResult.close();
                
                // Resultado
                bResult = true;

            }
        } catch (SQLException ex) {
            oFunc.SubSistemaMensaje("FnBoolExisteUsuario:"+ex.getMessage().toString());
        }

        if (bResult)
           SubCargaRoleProcesos();
        
        
        // Retorna el Resultado
        return bResult;
        
    }
    
    private void SubCargaRoleProcesos()
    {
        String sQuery;
        String sElemento;
        String sProceso;
        int iPosicion;
        int [] iSeleccionados;
        iSeleccionados = new int[lstProcesos.getModel().getSize()]; //tama√±o del arreglo es 3 elementos

        // Inicializa el Vector de Seleccionados
        for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
        {   
            // Coloca la posici√≥n de -1
            iSeleccionados[iPosicion]= -1;
        }
        
        // Prepara el Query de los Procesos
        sQuery = "Select * from 03tblrolprocesos where strRoleName='"+txtRole.getText().toString()+"'";

        // Ejecuta el Query para la Nueva Consulta
        oConn.FnBoolQueryExecute(sQuery);                                

        // Capturo el Error
        try 
        {
            // Verifico que haya habido resultados
            while (oConn.setResult.next())
            {
                // Obtengo el Proceso
                sProceso = oConn.setResult.getString ("strProcesoIde");

                for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
                {
                    // Obtiene el Elemento de la lista
                    sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
                    sElemento = sElemento.substring(0,10);                       
                    System.out.println("Comparando Elemento:" + sElemento +" con:"+sProceso);

                    if (sElemento.contentEquals(sProceso))
                    {
                        //lstProcesos.setSelectedIndex(iPosicion);
                        iSeleccionados[iPosicion]= iPosicion;
                    }
                }

                
            }
            // Asigna el Vector de Seleccionados
            lstProcesos.setSelectedIndices(iSeleccionados);
                
            // Cierro los Resultados
            oConn.setResult.close();                                

        } 
        catch (SQLException ex) 
        {
                oFunc.SubSistemaMensaje("SubGetRoleProcesos:"+ex.getMessage().toString());
        }
    }
    
    private void SubInicializaCaptura(boolean bClave)
    {
        // Inicializa los datos de Captura
        if (bClave)
           txtClave.setText(null);
        txpPassword.setText("");
        txpRePassword.setText("");
        txtName.setText("");
        txtRole.setText("");
        choRoles.select(0);
        
        // Carga las Claves
        SubClavesCarga();
        
        // Carga los procesos
        SubProcesosCarga();
        
    }
    
    private boolean fnBoolInsertaRoleProcesos()
    {
        int iPosicion;
        String sElemento;
        String sQuery;
        boolean bResult=true;
        
        for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            
            // Verifica si esta seleccionado
            if (lstProcesos.isSelectedIndex(iPosicion))
            {
                // Prepara Query para Insersion
                sQuery = "Insert into 03tblRolProcesos ";
                sQuery = sQuery + " (strRoleName,strProcesoIde) ";
                sQuery = sQuery + " value ('"+txtRole.getText().toString()+"','"+sElemento+"')";
                
                // Ejecuta Inserci√≥n
                if (! oConn.FnBoolQueryExecuteUpdate(sQuery))
                    bResult = false;
            }
            
        }
        
        // Retorna
        return (bResult);
    }
    
    private void SubSeleccionaProceso(String strProceso)
    {
        int iPosicion;
        int [] iSeleccionados;
        iSeleccionados = new int[lstProcesos.getModel().getSize()]; //tama√±o del arreglo es 3 elementos
        String sElemento;
        
        for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            System.out.println("Comparando Elemento:" + sElemento +" con:"+strProceso);
            
            if (sElemento.contentEquals(strProceso))
            {
               //lstProcesos.setSelectedIndex(iPosicion);
               iSeleccionados[iPosicion]= iPosicion;
            }
            else
                iSeleccionados[iPosicion]=-1;
        }
        
        // Asigna el Vector de Seleccionados
        lstProcesos.setSelectedIndices(iSeleccionados);
        
    }
    
    private void SubSeleccionaRole(String strRole)
    {
        int iPosicion;
        String sElemento;
        
        for (iPosicion = 0; iPosicion < choRoles.getItemCount();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            System.out.println("Comparando Elemento:" + sElemento +" con:"+strRole);
            
            // Compara el Elemento
            if (sElemento.contentEquals(strRole))
            {
               choRoles.select(iPosicion);
               break;
            }
        }
                
    }
    
    private void btnInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsActionPerformed
        // TODO add your handling code here:
     // Valida que haya capturado algo
    // Valida el Usuario
    if (txtClave.getText().length()==0)
    {
        // Despliego el Mensaje
        oFunc.SubSistemaMensaje("Debe Capturar la Clave a Insertar");

        // Coloca el Foco en el Objeto
        txtClave.requestFocus();
        
        
    }
    else
        
        // Valido que el Usuario Exista
        if (FnBoolExisteUsuario())
            // Despliego el Mensaje
            oFunc.SubSistemaMensaje("La Clave a Insertar ya Existe");
        else
        {
            // Inicializa Captura
            SubInicializaCaptura(false);
            
            // Especifica la operacion
            Operacion = eOperaciones.Insert;
            
            // Habilita captura
            SubHabilitaCaptura(true);
            
        }         
            
 
    }//GEN-LAST:event_btnInsActionPerformed

    private void btnUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdActionPerformed
        // TODO add your handling code here:
            // Valida que haya capturado algo
    // Valida el Usuario
    if (txtClave.getText().length()==0)
    {
        // Despliego el Mensaje
        oFunc.SubSistemaMensaje("Debe Capturar la Clave a Modificar");

        // Coloca el Foco en el Objeto
        txtClave.requestFocus();
        
        
    }
    else
        if (! FnBoolExisteUsuario())
            // Despliego el Mensaje
            oFunc.SubSistemaMensaje("La Clave a Modificar No Existe");
        else
        {
            // Especifica la operacion
            Operacion = eOperaciones.Update;
            
            // Hablita la captura
            SubHabilitaCaptura(true);
            
        }         
            
 
    }//GEN-LAST:event_btnUpdActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
            // Valida que haya capturado algo
    // Valida el Usuario
    if (txtClave.getText().length()==0)
    {
        // Despliego el Mensaje
        oFunc.SubSistemaMensaje("Debe Capturar la Clave a Eliminar");

        // Coloca el Foco en el Objeto
        txtClave.requestFocus();
        
        
    }
    else
        if (! FnBoolExisteUsuario())
            // Despliego el Mensaje
            oFunc.SubSistemaMensaje("La Clave a Eliminar No Existe");
        else
        {
            // Especifica la operacion
            Operacion = eOperaciones.Delete;
            
            // Habilita la captura
            SubHabilitaCaptura(true);
            
            // Colocal el Foco en Ok
            btnOk.requestFocus();
        }
            
 
    }//GEN-LAST:event_btnDelActionPerformed

    
    
    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
        
        // Valida que los datos est√© correctos
        if (fnBoolDatosOk())
        {
            //Llama rutina de Transaccion
            if (Operacion == eOperaciones.Update)
                SubUpdateUser();
            else if  (Operacion == eOperaciones.Insert)
                SubInsertUser();
            else 
                SubDeleteUser();
            
            // Inicializa y Habilita Captura
            SubInicializaCaptura(true);
            SubHabilitaCaptura(false);
            SubProcesosCarga();
            SubRoleCarga();
        }
            
        
    }//GEN-LAST:event_btnOkActionPerformed

    private void choRolesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choRolesItemStateChanged
        // TODO add your handling code here:
        if (! choRoles.getSelectedItem().toString().equals("Seleccione"))
        {
            // Coloca el texto en el Role
            txtRole.setText(choRoles.getSelectedItem().toString());
            // Carga de Nuevo los Procesos
            SubCargaRoleProcesos();
        }
    }//GEN-LAST:event_choRolesItemStateChanged

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        SubInicializaCaptura(true);
        SubHabilitaCaptura(false);
        SubProcesosCarga();
       
    }//GEN-LAST:event_btnCancelActionPerformed

    private void choClavesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choClavesItemStateChanged
        // TODO add your handling code here:
        if (! choClaves.getSelectedItem().toString().equals("Seleccione"))
        {
            // Coloca el texto en el Role
            txtClave.setText(choClaves.getSelectedItem().toString());
            
            // Carga de Nuevo los Procesos
            FnBoolExisteUsuario();
            
        }
    }//GEN-LAST:event_choClavesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                frmClase06 dialog = new frmClase06(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnIns;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnUpd;
    private java.awt.Choice choClaves;
    private java.awt.Choice choRoles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPassword1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUser;
    private javax.swing.JList lstProcesos;
    private javax.swing.JPanel pnlClave;
    private javax.swing.JPanel pnlDetalle;
    private javax.swing.JPanel pnlOperaciones;
    private javax.swing.JPanel pnlTransaccion;
    private javax.swing.JPasswordField txpPassword;
    private javax.swing.JPasswordField txpRePassword;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtRole;
    // End of variables declaration//GEN-END:variables
}
